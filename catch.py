import streamlit as st
import random
import time
from collections import deque

# ----------------------------- ÏÑ§Ï†ï ----------------------------- #
DIRECTIONS = ['UP', 'RIGHT', 'DOWN', 'LEFT']
DIRECTION_SYMBOLS = {'UP': '‚Üë', 'RIGHT': '‚Üí', 'DOWN': '‚Üì', 'LEFT': '‚Üê'}
MOVE_OFFSET = {'UP': (-1, 0), 'DOWN': (1, 0), 'LEFT': (0, -1), 'RIGHT': (0, 1)}
PORTAL_SYMBOL = 'üåÄ'
MAP_SIZE = 9  # Ï§ÑÏûÑ

LEVELS = {
    "Level 1 (5Ï†ê, Ï∞©ÌïúÎßõ)": {"obstacles": 8, "score": 5, "ghost": False},
    "Level 2 (10Ï†ê, Î≥¥ÌÜµÎßõ)": {"obstacles": 14, "score": 10, "ghost": False},
    "Level 3 (20Ï†ê, Îß§Ïö¥Îßõ)": {"obstacles": 20, "score": 20, "ghost": False},
    "Level 4 (30Ï†ê, Î∂àÎã≠Îßõ)": {"obstacles": 22, "score": 30, "ghost": True, "ghost_range": 7, "ignore_obstacles": False},
    "Level 5 (50Ï†ê, ÌïµÎ∂àÎã≠Îßõ)": {"obstacles": 25, "score": 50, "ghost": True, "ghost_range": 5, "ignore_obstacles": True, "portals": True},
}

# ----------------------------- Ï¥àÍ∏∞Ìôî ----------------------------- #
if 'initialized' not in st.session_state:
    st.session_state.initialized = True
    st.session_state.level = list(LEVELS.keys())[0]
    st.session_state.position = None
    st.session_state.direction = 'UP'
    st.session_state.score = 0
    st.session_state.high_score = 0
    st.session_state.total_score = 0
    st.session_state.result = ''
    st.session_state.commands = []
    st.session_state.ghost = None
    st.session_state.ghost_path = []

    def reset_map(level):
        level_info = LEVELS[level]
        while True:
            all_pos = [(i, j) for i in range(MAP_SIZE) for j in range(MAP_SIZE)]
            start = random.choice(all_pos)
            all_pos.remove(start)
            obstacles = set(random.sample(all_pos, level_info["obstacles"]))
            all_pos = [p for p in all_pos if p not in obstacles]
            goals = random.sample(all_pos, 2)
            all_pos = [p for p in all_pos if p not in goals]
            portals = random.sample(all_pos, 2) if level_info.get("portals") else []
            if all(bfs_shortest_path(start, [g], obstacles) for g in goals):
                break
        ghost_range = level_info.get('ghost_range', 0)
        ghost = (max(0, start[0] - ghost_range), start[1]) if level_info.get("ghost") else None
        st.session_state.position = start
        st.session_state.start = start
        st.session_state.obstacles = obstacles
        st.session_state.goals = goals
        st.session_state.portals = portals
        st.session_state.ghost = ghost
        st.session_state.ghost_path = []

    def bfs_shortest_path(start, goals, obstacles):
        queue = deque([(start, [])])
        visited = {start}
        while queue:
            current, path = queue.popleft()
            if current in goals:
                return path
            for d in MOVE_OFFSET.values():
                nx, ny = current[0] + d[0], current[1] + d[1]
                next_pos = (nx, ny)
                if 0 <= nx < MAP_SIZE and 0 <= ny < MAP_SIZE and next_pos not in obstacles and next_pos not in visited:
                    visited.add(next_pos)
                    queue.append((next_pos, path + [next_pos]))
        return []

    def draw_grid():
        grid = ""
        for i in range(MAP_SIZE):
            for j in range(MAP_SIZE):
                p = (i, j)
                if p == st.session_state.position:
                    grid += 'ü§°' + DIRECTION_SYMBOLS[st.session_state.direction]
                elif p in st.session_state.obstacles:
                    grid += '‚¨õ'
                elif p in st.session_state.goals:
                    grid += 'üéØ'
                elif p == st.session_state.ghost:
                    grid += 'üëª'
                elif p in st.session_state.ghost_path:
                    grid += '¬∑'
                elif p in st.session_state.portals:
                    grid += PORTAL_SYMBOL
                else:
                    grid += '‚¨ú'
            grid += '\n'
        st.text(grid)

    reset_map(st.session_state.level)

# ----------------------------- UI ----------------------------- #
col1, col2 = st.columns([2, 1])
with col1:
    st.title("ü§ñ Î°úÎ¥á Î™ÖÎ†π ÌçºÏ¶ê Í≤åÏûÑ")

# ‚úÖ Î∞∞Í≤ΩÏùåÏïÖ ÏÇΩÏûÖ
st.markdown("""
<audio autoplay loop>
  <source src="https://www.bensound.com/bensound-music/bensound-littleidea.mp3" type="audio/mp3">
Your browser does not support the audio element.
</audio>
""", unsafe_allow_html=True)

    
    level = st.selectbox("Î†àÎ≤® ÏÑ†ÌÉù", list(LEVELS.keys()), index=list(LEVELS.keys()).index(st.session_state.level))
    if level != st.session_state.level:
        st.session_state.level = level
        reset_map(level)

with col2:
    with st.expander("üìò Í≤åÏûÑ ÏÑ§Î™ÖÏÑú"):
        st.markdown("""
        - ü§°: Î°úÎ¥á (Î∞©Ìñ• ÌëúÏãú Ìè¨Ìï®)
        - üéØ: Î™©Ìëú ÏßÄÏ†ê (2Í∞ú)
        - ‚¨õ: Ïû•Ïï†Î¨º (Ï∂©Îèå Ïãú Í≤åÏûÑ Ïò§Î≤Ñ)
        - üëª: Í∑ÄÏã† (Î†àÎ≤® 4, 5Ïóê Îì±Ïû•)
        - üåÄ: Ìè¨ÌÉà (Î†àÎ≤® 5ÏóêÏÑúÎßå Îì±Ïû•, ÌîåÎ†àÏù¥Ïñ¥Îßå Ïù¥Ïö© Í∞ÄÎä•)
        - ÌöåÏ†Ñ Î™ÖÎ†π: `ÏôºÏ™Ω ÌöåÏ†Ñ`, `Ïò§Î•∏Ï™Ω ÌöåÏ†Ñ`
        - Ïù¥Îèô Î™ÖÎ†π: `ÏïûÏúºÎ°ú`, `ÏïûÏúºÎ°ú 2`, `ÏïûÏúºÎ°ú 3`
        - Î™©Ìëú ÌöçÎìù Î™ÖÎ†π: `ÏßëÍ∏∞`
        """)

commands = st.text_area("Î™ÖÎ†πÏñ¥ ÏûÖÎ†• (Ï§ÑÎ∞îÍøàÏúºÎ°ú Íµ¨Î∂Ñ)")
if st.button("Ïã§Ìñâ"):
    pos = st.session_state.start
    direction = 'UP'
    ghost = st.session_state.ghost
    ghost_path = []
    visited_goals = set()
    failed = False
    cmds = commands.strip().split('\n')

    for cmd in cmds:
        st.write(f"üõ† Î™ÖÎ†πÏñ¥: `{cmd}`")
        cmd = cmd.strip()
        if cmd.startswith("ÏïûÏúºÎ°ú"):
            parts = cmd.split()
            steps = int(parts[1]) if len(parts) > 1 else 1
            for _ in range(steps):
                offset = MOVE_OFFSET[direction]
                next_pos = (pos[0] + offset[0], pos[1] + offset[1])
                if not (0 <= next_pos[0] < MAP_SIZE and 0 <= next_pos[1] < MAP_SIZE):
                    st.session_state.result = "‚ùå Î≤îÏúÑ Î∞ñÏúºÎ°ú Ïù¥Îèô!"
                    failed = True
                    break
                if next_pos in st.session_state.obstacles:
                    st.session_state.result = "‚ùå Ïû•Ïï†Î¨ºÏóê Î∂ÄÎî™Ìûò!"
                    failed = True
                    break
                pos = next_pos
        elif "ÌöåÏ†Ñ" in cmd:
            idx = DIRECTIONS.index(direction)
            if cmd == "Ïò§Î•∏Ï™Ω ÌöåÏ†Ñ":
                direction = DIRECTIONS[(idx + 1) % 4]
            else:
                direction = DIRECTIONS[(idx - 1) % 4]
        elif cmd == "ÏßëÍ∏∞" and pos in st.session_state.goals:
            visited_goals.add(pos)

        if failed:
            break

        # Ìè¨ÌÉà
        if pos in st.session_state.portals:
            others = [p for p in st.session_state.portals if p != pos]
            if others:
                dest = others[0]
                around = [(dest[0]+dx, dest[1]+dy) for dx, dy in MOVE_OFFSET.values()]
                random.shuffle(around)
                for a in around:
                    if 0 <= a[0] < MAP_SIZE and 0 <= a[1] < MAP_SIZE:
                        pos = a
                        break

        # Í∑ÄÏã†
        if ghost:
            gx, gy = ghost
            px, py = pos
            dx, dy = px - gx, py - gy
            moves = []
            if dx != 0:
                moves.append((gx + (1 if dx > 0 else -1), gy))
            if dy != 0:
                moves.append((gx, gy + (1 if dy > 0 else -1)))
            for m in moves:
                if 0 <= m[0] < MAP_SIZE and 0 <= m[1] < MAP_SIZE:
                    if LEVELS[st.session_state.level].get("ignore_obstacles", False) or m not in st.session_state.obstacles:
                        ghost = m
                        break
            ghost_path.append(ghost)
            if ghost == pos:
                st.session_state.result = "üëª Í∑ÄÏã†ÏóêÍ≤å Ïû°ÌòîÏäµÎãàÎã§!"
                failed = True
                break

        draw_grid()
        time.sleep(0.4)

    if not failed:
        score = len(visited_goals) * LEVELS[st.session_state.level]["score"]
        st.session_state.score = score
        st.session_state.total_score += score
        st.session_state.high_score = max(st.session_state.high_score, score)
        st.session_state.result = f"üéØ Î™©Ìëú ÎèÑÎã¨: {len(visited_goals)}Í∞ú / Ï†êÏàò: {score}"
        if len(visited_goals) == 2 and len(cmds) <= len(bfs_shortest_path(st.session_state.start, st.session_state.goals, st.session_state.obstacles)) + 2:
            st.session_state.result += "\nüåü Perfect!"

    st.session_state.position = pos
    st.session_state.direction = direction
    st.session_state.ghost = ghost
    st.session_state.ghost_path = ghost_path

# ----------------------------- Ï∂úÎ†• ----------------------------- #
st.markdown(f"**ÌòÑÏû¨ Ï†êÏàò:** {st.session_state.score} / **ÏµúÍ≥† Ï†êÏàò:** {st.session_state.high_score} / **ÎàÑÏ†Å Ï†êÏàò:** {st.session_state.total_score}")
st.markdown(f"**Í≤∞Í≥º:** {st.session_state.result}")
draw_grid()

if st.button("üîÅ Îã§Ïãú ÏãúÏûë"):
    reset_map(st.session_state.level)


with st.expander("üìò Í≤åÏûÑ ÏÑ§Î™ÖÏÑú Î≥¥Í∏∞"):
    st.markdown("""
    ### üéÆ Í≤åÏûÑ Î∞©Î≤ï
    Î°úÎ¥á ü§°ÏóêÍ≤å Î™ÖÎ†πÏñ¥Î•º ÏûÖÎ†•ÌïòÏó¨ Îëê Í∞úÏùò üéØ Î™©Ìëú ÏßÄÏ†êÏùÑ Î∞©Î¨∏ÌïòÍ≥† `ÏßëÍ∏∞` Î™ÖÎ†πÏúºÎ°ú ÏàòÏßëÌïòÏÑ∏Ïöî!  
    Ïû•Ïï†Î¨º(‚¨õ)ÏùÑ ÌîºÌïòÍ≥†, Í∑ÄÏã†(üëª)ÏóêÍ≤å Ïû°ÌûàÏßÄ ÏïäÎèÑÎ°ù Ï°∞Ïã¨ÌïòÏÑ∏Ïöî!

    ### ‚úèÔ∏è ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥
    - `ÏïûÏúºÎ°ú` : Ìïú Ïπ∏ Ï†ÑÏßÑ
    - `ÏïûÏúºÎ°ú2`, `ÏïûÏúºÎ°ú3` : Ïó¨Îü¨ Ïπ∏ Ï†ÑÏßÑ
    - `ÏôºÏ™Ω ÌöåÏ†Ñ` : Î∞òÏãúÍ≥Ñ Î∞©Ìñ•ÏúºÎ°ú 90ÎèÑ ÌöåÏ†Ñ
    - `Ïò§Î•∏Ï™Ω ÌöåÏ†Ñ` : ÏãúÍ≥Ñ Î∞©Ìñ•ÏúºÎ°ú 90ÎèÑ ÌöåÏ†Ñ
    - `ÏßëÍ∏∞` : ÌòÑÏû¨ Ïπ∏Ïóê Î™©ÌëúÎ¨ºÏù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÏàòÏßë

    ### üåÄ Ìè¨ÌÉà (Level 5)
    - Ìè¨ÌÉà(üåÄ)Ïóê Îì§Ïñ¥Í∞ÄÎ©¥ Îã§Î•∏ Ìè¨ÌÉà Í∑ºÏ≤ò ÎûúÎç§ ÏúÑÏπòÎ°ú ÏàúÍ∞Ñ Ïù¥Îèô!
    - Í∑ÄÏã†ÏùÄ Ìè¨ÌÉàÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.

    ### üëª Í∑ÄÏã†
    - Î†àÎ≤® 4: Í∑ÄÏã†ÏùÄ Ïû•Ïï†Î¨ºÏùÑ ÌîºÌï¥ÏÑú Ïù¥Îèô
    - Î†àÎ≤® 5: Í∑ÄÏã†ÏùÄ Ïû•Ïï†Î¨ºÏùÑ Î¨¥ÏãúÌïòÍ≥† ÏßÅÏßÑ Ï∂îÏ†Å

    ### üèÜ Perfect ÌåêÏ†ï
    - ÏµúÎã® Í≤ΩÎ°ú + Î™®Îì† Î™©Ìëú ÏàòÏßë + Î™ÖÎ†π Ïàò ÏµúÏÜåÏùº Îïå Perfect! üåü

    ### üß± Í∞Å Î†àÎ≤® Ï†ïÎ≥¥
    - Level 1 (5Ï†ê, Ï∞©ÌïúÎßõ): Ïû•Ïï†Î¨º 8Í∞ú, Í∑ÄÏã† ÏóÜÏùå
    - Level 2 (10Ï†ê, Î≥¥ÌÜµÎßõ): Ïû•Ïï†Î¨º 14Í∞ú, Í∑ÄÏã† ÏóÜÏùå
    - Level 3 (20Ï†ê, Îß§Ïö¥Îßõ): Ïû•Ïï†Î¨º 20Í∞ú, Í∑ÄÏã† ÏóÜÏùå
    - Level 4 (30Ï†ê, Î∂àÎã≠Îßõ): Ïû•Ïï†Î¨º 22Í∞ú, Í∑ÄÏã† 1Î™Ö
    - Level 5 (50Ï†ê, ÌïµÎ∂àÎã≠Îßõ): Ïû•Ïï†Î¨º 25Í∞ú, Í∑ÄÏã† 1Î™Ö, Ìè¨ÌÉà 2Í∞ú
    """)
